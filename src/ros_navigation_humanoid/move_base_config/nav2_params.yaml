map_server:
  ros__parameters:
    qos_overrides:
      /map:
        reliability: reliable      # 持续发布，确保订阅方不会丢失数据
        durability: transient_local # 保留最后一条消息，供后启动的节点（如 RViz）获取
        
controller_server:
  ros__parameters:
    controller_frequency: 10.0
    use_sim_time: true 
    print_failure_reasons: true  # 输出失败原因
    debug_trajectory: true       # 调试轨迹
    # odom_frame_id: "odom"
    # base_frame_id: "base_link"
    global_frame: odom  
    robot_base_frame: base_link
    odom_frame_id: odom
    use_footprint_pad: false
    footprint_padding: 0.0 
    # footprint: "[[-0.1, -0.1], [0.1, -0.1], [0.1, 0.1], [-0.1, 0.1]]"
    robot_radius: 2.0  # 使用足迹时设为0
    controller_plugins: ["FollowPath"]
    
    # DWB
    # FollowPath:
    #   plugin: "dwb_core::DWBLocalPlanner"
    #   # critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
    #   critics: ["RotateToGoal","Oscillation", "PathAlign", "PathDist"]
    #   # 运动参数
    #   required_dist_ratio: 0.01
    #   allow_forward_trajectories_without_heading: true
    #   publish_footprint: false
    #   footprint_topic: ""
    #   max_vel_x: 0.5
    #   min_vel_x: -0.5
    #   max_vel_theta: 1.0
    #   min_vel_theta: -1.0
    #   acc_lim_x: 1.0
    #   acc_lim_theta: 0.6
    #   xy_goal_tolerance: 0.5
    #   yaw_goal_tolerance: 0.8
    #   inflation_radius: 0.12
    #   holonomic_robot: false 
    #   min_x_velocity_threshold: 0.001
    #   min_y_velocity_threshold: 0.001
    #   min_theta_velocity_threshold: 0.001
    #   # 确保指定成本地图话题
    #   costmap_topic: local_costmap/costmap_raw
    #   footprint_topic: local_costmap/published_footprint
    #   # DWA特有参数
    #   sim_time: 2.0
    #   vx_samples: 50
    #   vtheta_samples: 50
    #   resolution: 0.05
    #   # 必须添加的目标检查器配置
    #   goal_checker:
    #     plugin: "nav2_controller::SimpleGoalChecker"
    #     xy_goal_tolerance: 0.30
    #     yaw_goal_tolerance: 0.8
    #   progress_checker:
    #     plugin: "nav2_controller::SimpleProgressChecker"
    #     required_movement_radius: 0.1  
    #     movement_time_allowance: 10.0  
    #   # 添加传感器配置
    #   observation_sources: scan
    #   scan:
    #     topic: /scan
    #     data_type: "LaserScan"
    #     marking: true
    #     clearing: true

    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"

      # ---- 时间/采样 ----
      time_steps: 30              # 预测步数
      model_dt: 0.1               # 每步时长 [s]
      batch_size: 1000            # 采样轨迹条数
      vx_std: 0.2                 # 线速度采样噪声
      vy_std: 0.2                 # 全向机器人时才用
      wz_std: 0.3                 # 角速度采样噪声

      # ---- 约束/代价 ----
      max_vel_x: 0.5
      min_vel_x: -0.5
      max_vel_theta: 1.0
      min_vel_theta: -1.0
      acc_lim_x: 1.0
      acc_lim_theta: 2.0

      costmap_topic: local_costmap/costmap

      # 各 critic 权重（0 表示关闭）
      critics: [
        "ConstraintCritic",
        "ObstaclesCritic",
        "GoalCritic",
        "PathAlignCritic",
        "PathFollowCritic",
        "PathAngleCritic"
      ]
      ConstraintCritic.weight: 4.0
      ObstaclesCritic.weight: 1.5
      ObstaclesCritic.cost_power: 2
      GoalCritic.weight: 5.0
      PathAlignCritic.weight: 14.0
      PathFollowCritic.weight: 5.0
      PathAngleCritic.weight: 2.0

      prediction_horizon: 3.0  # 预测时域（秒）
      num_samples: 150         # 采样轨迹数（减少计算量）
      sim_time: 0.3            # 单步模拟时间（秒）
      horizon: 10

      # ---- 目标检查 ----
      goal_checker:
        plugin: "nav2_controller::SimpleGoalChecker"
        xy_goal_tolerance: 0.25
        yaw_goal_tolerance: 0.5
      progress_checker:
        enabled: true
        plugin: "nav2_controller::SimpleProgressChecker"
        required_movement_radius: 0.05
        movement_time_allowance: 15.0
      cost_weights:
        obstacle: 10.0  # 增大避障权重
        path_tracking: 1.0  # 保持路径跟踪权重
        rotation: 1.0

planner_server:
  ros__parameters:
    use_sim_time: true 
    global_frame: map
    robot_base_frame: base_link
    odom_frame_id: odom
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      default_frame_id: "map"
      use_astar: true
      allow_unknown: true
      tolerance: 0.5
      # 添加代价转换函数
      cost_travel_factor: 1.0
      use_final_approach_orientation: false

global_costmap:
  global_costmap:
    ros__parameters:
      global_frame: map
      robot_base_frame: base_link 
      odom_frame_id: odom
      origin_x: -50.0  
      origin_y: -50.0  
      update_frequency: 1.0
      publish_frequency: 1.0
      static_map: true
      rolling_window: false
      width: 100
      height: 100
      # 插件声明
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_topic: /map
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        # topic: /scan
        observation_sources: scan
        scan:
          topic: /scan
          data_type: LaserScan
          marking: true
          clearing: true
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 0.15
        cost_scaling_factor: 8.0
      track_unknown_space: true
      always_send_full_costmap: true

local_costmap:
  local_costmap:
    ros__parameters:
      global_frame: odom  
      robot_base_frame: base_link
      odom_frame_id: "odom"
      origin_x: 0.0   
      origin_y: 0.0   
      update_frequency: 10.0
      publish_frequency: 10.0
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      footprint: "[[-0.1 -0.1], [0.1, -0.1], [0.1, 0.1], [-0.1, 0.1]]"
      publish_footprint: false
      footprint_topic: ""
      # 插件声明
      plugins: ["obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        # topic: /scan
        observation_sources: scan
        scan:
          topic: /scan
          data_type: LaserScan
          marking: true
          clearing: true
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 0.15
        cost_scaling_factor: 3.0
      track_unknown_space: true
      rolling_window: true
      always_send_full_costmap: true 

# 通用传感器配置
costmap_common:
  ros__parameters:
    robot_radius: 0.1
    # footprint: "[[-0.2, -0.2], [0.2, -0.2], [0.2, 0.2], [-0.2, 0.2]]"
    transform_tolerance: 0.5
    obstacle_range: 5.0
    raytrace_range: 5.5
    inflation_radius: 0.12
    # 传感器配置
    observation_sources: scan
    scan:
      sensor_frame: laser_link
      data_type: "LaserScan"
      topic: "/scan"
      marking: true
      clearing: true
      min_obstacle_height: 0.5
      max_obstacle_height: 2.0

amcl:
  ros__parameters:
    base_frame_id: base_link
    odom_frame_id: odom
    global_frame_id: map
    use_sim_time: true  
    update_min_d: 0.5  
    update_min_a: 0.05
    laser_z_hit: 0.9  
    transform_tolerance: 1.0
    min_particles: 1000
    max_particles: 5000
    # 调整噪声模型
    laser_z_hit: 0.95
    laser_z_rand: 0.05
    laser_sigma_hit: 0.2

bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"

    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

# 生命周期管理器配置
lifecycle_manager:
  ros__parameters:
    autostart: true
    node_names: 
      - map_server
      - amcl
      - planner_server
      - controller_server
      - smoother_server
      - behavior_server
      - bt_navigator
    bond_timeout: 10.0
    bringup_order: [map_server, amcl, planner_server, controller_server]